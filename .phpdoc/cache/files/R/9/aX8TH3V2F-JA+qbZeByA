1714556047
waR3U4bTeM%3Ab8b687eeef47d5ed4dd9c03fa9459177-6ab34803f9bc8ea3d0ee6ba266024b8e
s:58452:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"6ab34803f9bc8ea3d0ee6ba266024b8e";s:39:" phpDocumentor\Reflection\Php\File name";s:31:"app-core-database-Database.html";s:39:" phpDocumentor\Reflection\Php\File path";s:51:"public/docs/classes/app-core-database-Database.html";s:41:" phpDocumentor\Reflection\Php\File source";s:42886:"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
            <title>My MVC Framework</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base href="../">
    <link rel="icon" href="images/favicon.ico"/>
    <link rel="stylesheet" href="css/normalize.css">
    <link rel="stylesheet" href="css/base.css">
            <link rel="preconnect" href="https://fonts.gstatic.com">
        <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;600;700&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="css/template.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0/css/all.min.css" integrity="sha256-ybRkN9dBjhcS2qrW1z+hfCxq+1aBdwyQM5wlQoQVt/0=" crossorigin="anonymous" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/themes/prism-okaidia.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/plugins/line-numbers/prism-line-numbers.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/plugins/line-highlight/prism-line-highlight.css">
                <script src="https://cdn.jsdelivr.net/npm/fuse.js@3.4.6"></script>
        <script src="https://cdn.jsdelivr.net/npm/css-vars-ponyfill@2"></script>
        <script src="js/search.js"></script>
        <script defer src="js/searchIndex.js"></script>
    </head>
<body id="top">
    <header class="phpdocumentor-header phpdocumentor-section">
    <h1 class="phpdocumentor-title"><a href="" class="phpdocumentor-title__link">My MVC Framework</a></h1>
    <input class="phpdocumentor-header__menu-button" type="checkbox" id="menu-button" name="menu-button" />
    <label class="phpdocumentor-header__menu-icon" for="menu-button">
        <i class="fas fa-bars"></i>
    </label>
    <section data-search-form class="phpdocumentor-search">
    <label>
        <span class="visually-hidden">Search for</span>
        <svg class="phpdocumentor-search__icon" width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="7.5" cy="7.5" r="6.5" stroke="currentColor" stroke-width="2"/>
            <line x1="12.4892" y1="12.2727" x2="19.1559" y2="18.9393" stroke="currentColor" stroke-width="3"/>
        </svg>
        <input type="search" class="phpdocumentor-field phpdocumentor-search__field" placeholder="Loading .." disabled />
    </label>
</section>

    <nav class="phpdocumentor-topnav">
    <ul class="phpdocumentor-topnav__menu">
        </ul>
</nav>
</header>

    <main class="phpdocumentor">
        <div class="phpdocumentor-section">
            <input class="phpdocumentor-sidebar__menu-button" type="checkbox" id="sidebar-button" name="sidebar-button" />
<label class="phpdocumentor-sidebar__menu-icon" for="sidebar-button">
    Menu
</label>
<aside class="phpdocumentor-column -four phpdocumentor-sidebar">
                    <section class="phpdocumentor-sidebar__category">
            <h2 class="phpdocumentor-sidebar__category-header">Namespaces</h2>
                                    <h4 class="phpdocumentor-sidebar__root-namespace">
    <a href="namespaces/app.html" class="">app</a>
</h4>
    <ul class="phpdocumentor-list">
                    <li>
                <a href="namespaces/app-controllers.html" class="">controllers</a>
                
            </li>
                    <li>
                <a href="namespaces/app-core.html" class="">core</a>
                
            </li>
                    <li>
                <a href="namespaces/app-models.html" class="">models</a>
                
            </li>
            </ul>

                        </section>
                <section class="phpdocumentor-sidebar__category">
            <h2 class="phpdocumentor-sidebar__category-header">Packages</h2>
                                    <h4 class="phpdocumentor-sidebar__root-namespace">
    <a href="packages/MyMVCFramework.html" class="">MyMVCFramework</a>
</h4>

                        </section>
            
    <section class="phpdocumentor-sidebar__category">
        <h2 class="phpdocumentor-sidebar__category-header">Reports</h2>
                <h3 class="phpdocumentor-sidebar__root-package"><a href="reports/deprecated.html">Deprecated</a></h3>
        <h3 class="phpdocumentor-sidebar__root-package"><a href="reports/errors.html">Errors</a></h3>
        <h3 class="phpdocumentor-sidebar__root-package"><a href="reports/markers.html">Markers</a></h3>
    </section>

    <section class="phpdocumentor-sidebar__category">
        <h2 class="phpdocumentor-sidebar__category-header">Indices</h2>
        <h3 class="phpdocumentor-sidebar__root-package"><a href="indices/files.html">Files</a></h3>
    </section>
</aside>

            <div class="phpdocumentor-column -eight phpdocumentor-content">
                    <ul class="phpdocumentor-breadcrumbs">
            <li class="phpdocumentor-breadcrumb"><a href="namespaces/app.html">app</a></li>
            <li class="phpdocumentor-breadcrumb"><a href="namespaces/app-core.html">core</a></li>
            <li class="phpdocumentor-breadcrumb"><a href="namespaces/app-core-database.html">database</a></li>
    </ul>

    <article class="phpdocumentor-element -class">
        <h2 class="phpdocumentor-content__title">
    Database

    
            <div class="phpdocumentor-element__package">
            in package
            <ul class="phpdocumentor-breadcrumbs">
                                    <li class="phpdocumentor-breadcrumb"><a href="packages/MyMVCFramework.html">MyMVCFramework</a></li>
                            </ul>
        </div>
    
    
    </h2>

        <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">36</span>

    </aside>

            <p class="phpdocumentor-summary">Use Connection.php to create a connection to the database</p>



    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                                                <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">copyright</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>(c) 2022</p>
</section>

                                    </dd>
                        </dl>






<h3 id="toc">
    Table of Contents
    <a href="#toc" class="headerlink"><i class="fas fa-link"></i></a>
</h3>

<dl class="phpdocumentor-table-of-contents">
                    <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_connection">$connection</a>
    <span>
                        &nbsp;: <abbr title="\mysqli">mysqli</abbr>|<abbr title="\PDO">PDO</abbr>            </span>
</dt>
<dd>Summary of connection</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_host">$host</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>host variable is a string</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_interface">$interface</a>
    <span>
                        &nbsp;: mixed            </span>
</dt>
<dd></dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_name">$name</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>Database name, if type is sqlite this is the path to the database file</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_pass">$pass</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>Password for the user</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_pdoOptions">$pdoOptions</a>
    <span>
                        &nbsp;: array&lt;string|int, mixed&gt;            </span>
</dt>
<dd>PDO Connection options array, currently sets default returns as assoc arrays, can change or add other properties. Only use dby the PDODatabase</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_port">$port</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>Database port used</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_type">$type</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>Database type, used only with PDO connection</dd>

            <dt class="phpdocumentor-table-of-contents__entry -property -private">
    <a href="classes/app-core-database-Database.html#property_user">$user</a>
    <span>
                        &nbsp;: string            </span>
</dt>
<dd>Username for the connection</dd>

                <dt class="phpdocumentor-table-of-contents__entry -method -public">
    <a href="classes/app-core-database-Database.html#method___get">__get()</a>
    <span>
                                &nbsp;: mixed    </span>
</dt>
<dd></dd>

            <dt class="phpdocumentor-table-of-contents__entry -method -public">
    <a href="classes/app-core-database-Database.html#method___set">__set()</a>
    <span>
                                &nbsp;: mixed    </span>
</dt>
<dd></dd>

            <dt class="phpdocumentor-table-of-contents__entry -method -public">
    <a href="classes/app-core-database-Database.html#method_connect">connect()</a>
    <span>
                                &nbsp;: void    </span>
</dt>
<dd>Create connection object</dd>

            <dt class="phpdocumentor-table-of-contents__entry -method -public">
    <a href="classes/app-core-database-Database.html#method_getConnection">getConnection()</a>
    <span>
                                &nbsp;: <abbr title="\PDO">PDO</abbr>|<abbr title="\mysqli">mysqli</abbr>    </span>
</dt>
<dd>Fetches connection from the class. you technically can use teh getter, but this allows a functional process for this</dd>

        </dl>



        

        
    <section class="phpdocumentor-properties">
        <h3 class="phpdocumentor-elements__header" id="properties">
            Properties
            <a href="classes/app-core-database-Database.html#properties" class="headerlink"><i class="fas fa-link"></i></a>
        </h3>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_connection">
        $connection
        <a href="classes/app-core-database-Database.html#property_connection" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">85</span>

    </aside>

        <p class="phpdocumentor-summary">Summary of connection</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type"><abbr title="\mysqli">mysqli</abbr>|<abbr title="\PDO">PDO</abbr></span>
    <span class="phpdocumentor-signature__name">$connection</span>
    </code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_host">
        $host
        <a href="classes/app-core-database-Database.html#property_host" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">43</span>

    </aside>

        <p class="phpdocumentor-summary">host variable is a string</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$host</span>
     = <span class="phpdocumentor-signature__default-value">&#039;localhost&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_interface">
        $interface
        <a href="classes/app-core-database-Database.html#property_interface" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">86</span>

    </aside>

    
    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">mixed</span>
    <span class="phpdocumentor-signature__name">$interface</span>
     = <span class="phpdocumentor-signature__default-value">\app\core\database\DatabaseInterface::MYSQLI_INTERFACE</span></code>

        <section class="phpdocumentor-description"></section>

        <section class="phpdocumentor-description"></section>

    

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_name">
        $name
        <a href="classes/app-core-database-Database.html#property_name" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">49</span>

    </aside>

        <p class="phpdocumentor-summary">Database name, if type is sqlite this is the path to the database file</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$name</span>
     = <span class="phpdocumentor-signature__default-value">&#039;&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_pass">
        $pass
        <a href="classes/app-core-database-Database.html#property_pass" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">61</span>

    </aside>

        <p class="phpdocumentor-summary">Password for the user</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$pass</span>
     = <span class="phpdocumentor-signature__default-value">&#039;&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_pdoOptions">
        $pdoOptions
        <a href="classes/app-core-database-Database.html#property_pdoOptions" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">79</span>

    </aside>

        <p class="phpdocumentor-summary">PDO Connection options array, currently sets default returns as assoc arrays, can change or add other properties. Only use dby the PDODatabase</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">array&lt;string|int, mixed&gt;</span>
    <span class="phpdocumentor-signature__name">$pdoOptions</span>
     = <span class="phpdocumentor-signature__default-value">[\PDO::ATTR_DEFAULT_FETCH_MODE =&gt; \PDO::FETCH_ASSOC, \PDO::ATTR_EMULATE_PREPARES =&gt; false]</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_port">
        $port
        <a href="classes/app-core-database-Database.html#property_port" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">67</span>

    </aside>

        <p class="phpdocumentor-summary">Database port used</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$port</span>
     = <span class="phpdocumentor-signature__default-value">&#039;3306&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_type">
        $type
        <a href="classes/app-core-database-Database.html#property_type" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">73</span>

    </aside>

        <p class="phpdocumentor-summary">Database type, used only with PDO connection</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$type</span>
     = <span class="phpdocumentor-signature__default-value">&#039;mysql&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
                    <article
        class="
            phpdocumentor-element
            -property
            -private
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="property_user">
        $user
        <a href="classes/app-core-database-Database.html#property_user" class="headerlink"><i class="fas fa-link"></i></a>
        <span class="phpdocumentor-element__modifiers">
                                </span>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">55</span>

    </aside>

        <p class="phpdocumentor-summary">Username for the connection</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">private</span>
        <span class="phpdocumentor-signature__type">string</span>
    <span class="phpdocumentor-signature__name">$user</span>
     = <span class="phpdocumentor-signature__default-value">&#039;&#039;</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

</article>
            </section>

            <section class="phpdocumentor-methods">
        <h3 class="phpdocumentor-elements__header" id="methods">
            Methods
            <a href="classes/app-core-database-Database.html#methods" class="headerlink"><i class="fas fa-link"></i></a>
        </h3>
                    <article
        class="phpdocumentor-element
            -method
            -public
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="method___get">
        __get()
        <a href="classes/app-core-database-Database.html#method___get" class="headerlink"><i class="fas fa-link"></i></a>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">88</span>

    </aside>

    
    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">public</span>
                    <span class="phpdocumentor-signature__name">__get</span><span>(</span><span class="phpdocumentor-signature__argument"><span class="phpdocumentor-signature__argument__return-type">mixed&nbsp;</span><span class="phpdocumentor-signature__argument__name">$prop</span></span><span>)</span><span> : </span><span class="phpdocumentor-signature__response_type">mixed</span></code>

        <section class="phpdocumentor-description"></section>

        <h5 class="phpdocumentor-argument-list__heading">Parameters</h5>
    <dl class="phpdocumentor-argument-list">
                    <dt class="phpdocumentor-argument-list__entry">
                <span class="phpdocumentor-signature__argument__name">$prop</span>
                : <span class="phpdocumentor-signature__argument__return-type">mixed</span>
                            </dt>
            <dd class="phpdocumentor-argument-list__definition">
                    <section class="phpdocumentor-description"></section>

            </dd>
            </dl>

    

        <h5 class="phpdocumentor-return-value__heading">Return values</h5>
    <span class="phpdocumentor-signature__response_type">mixed</span>
            &mdash;
        
    
</article>
                    <article
        class="phpdocumentor-element
            -method
            -public
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="method___set">
        __set()
        <a href="classes/app-core-database-Database.html#method___set" class="headerlink"><i class="fas fa-link"></i></a>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">93</span>

    </aside>

    
    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">public</span>
                    <span class="phpdocumentor-signature__name">__set</span><span>(</span><span class="phpdocumentor-signature__argument"><span class="phpdocumentor-signature__argument__return-type">mixed&nbsp;</span><span class="phpdocumentor-signature__argument__name">$prop</span></span><span class="phpdocumentor-signature__argument"><span>, </span><span class="phpdocumentor-signature__argument__return-type">mixed&nbsp;</span><span class="phpdocumentor-signature__argument__name">$value</span></span><span>)</span><span> : </span><span class="phpdocumentor-signature__response_type">mixed</span></code>

        <section class="phpdocumentor-description"></section>

        <h5 class="phpdocumentor-argument-list__heading">Parameters</h5>
    <dl class="phpdocumentor-argument-list">
                    <dt class="phpdocumentor-argument-list__entry">
                <span class="phpdocumentor-signature__argument__name">$prop</span>
                : <span class="phpdocumentor-signature__argument__return-type">mixed</span>
                            </dt>
            <dd class="phpdocumentor-argument-list__definition">
                    <section class="phpdocumentor-description"></section>

            </dd>
                    <dt class="phpdocumentor-argument-list__entry">
                <span class="phpdocumentor-signature__argument__name">$value</span>
                : <span class="phpdocumentor-signature__argument__return-type">mixed</span>
                            </dt>
            <dd class="phpdocumentor-argument-list__definition">
                    <section class="phpdocumentor-description"></section>

            </dd>
            </dl>

    

        <h5 class="phpdocumentor-return-value__heading">Return values</h5>
    <span class="phpdocumentor-signature__response_type">mixed</span>
            &mdash;
        
    
</article>
                    <article
        class="phpdocumentor-element
            -method
            -public
                        -abstract                                "
>
    <h4 class="phpdocumentor-element__name" id="method_connect">
        connect()
        <a href="classes/app-core-database-Database.html#method_connect" class="headerlink"><i class="fas fa-link"></i></a>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">103</span>

    </aside>

        <p class="phpdocumentor-summary">Create connection object</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">public</span>
    <span class="phpdocumentor-signature__abstract">abstract</span>                <span class="phpdocumentor-signature__name">connect</span><span>(</span><span>)</span><span> : </span><span class="phpdocumentor-signature__response_type">void</span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

        <h5 class="phpdocumentor-return-value__heading">Return values</h5>
    <span class="phpdocumentor-signature__response_type">void</span>
            &mdash;
        
    
</article>
                    <article
        class="phpdocumentor-element
            -method
            -public
                                                        "
>
    <h4 class="phpdocumentor-element__name" id="method_getConnection">
        getConnection()
        <a href="classes/app-core-database-Database.html#method_getConnection" class="headerlink"><i class="fas fa-link"></i></a>
    </h4>
    <aside class="phpdocumentor-element-found-in">
    <abbr class="phpdocumentor-element-found-in__file" title="core/database/Database.php"><a href="files/core-database-database.html"><abbr title="core/database/Database.php">Database.php</abbr></a></abbr>
    :
    <span class="phpdocumentor-element-found-in__line">110</span>

    </aside>

        <p class="phpdocumentor-summary">Fetches connection from the class. you technically can use teh getter, but this allows a functional process for this</p>

    <code class="phpdocumentor-code phpdocumentor-signature ">
    <span class="phpdocumentor-signature__visibility">public</span>
                    <span class="phpdocumentor-signature__name">getConnection</span><span>(</span><span>)</span><span> : </span><span class="phpdocumentor-signature__response_type"><abbr title="\PDO">PDO</abbr>|<abbr title="\mysqli">mysqli</abbr></span></code>

    
    
    
    <h5 class="phpdocumentor-tag-list__heading" id="tags">
        Tags
        <a href="#tags" class="headerlink"><i class="fas fa-link"></i></a>
    </h5>
    <dl class="phpdocumentor-tag-list">
                                    <dt class="phpdocumentor-tag-list__entry">
                    <span class="phpdocumentor-tag__name">author</span>
                </dt>
                <dd class="phpdocumentor-tag-list__definition">
                                                                                
                                                 <section class="phpdocumentor-description"><p>Jesse Fender</p>
</section>

                                    </dd>
                        </dl>

        <h5 class="phpdocumentor-return-value__heading">Return values</h5>
    <span class="phpdocumentor-signature__response_type"><abbr title="\PDO">PDO</abbr>|<abbr title="\mysqli">mysqli</abbr></span>
            &mdash;
            <section class="phpdocumentor-description"><p>database connection object</p>
</section>

    
</article>
            </section>

        
    <script type="text/javascript">
        function loadExternalCodeSnippets(line) {
            Array.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach((pre) => {
                var src = pre.getAttribute('data-src').replace( /\\/g, '/');
                var extension = (src.match(/\.(\w+)$/) || [, ''])[1];
                var language = 'php';

                var code = document.createElement('code');
                code.className = 'language-' + language;

                pre.textContent = '';

                pre.setAttribute('data-line', line)
                code.textContent = 'Loading…';

                pre.appendChild(code);

                var xhr = new XMLHttpRequest();

                xhr.open('GET', src, true);

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {

                        if (xhr.status < 400 && xhr.responseText) {
                            code.textContent = xhr.responseText;

                            Prism.highlightElement(code);
                        }
                        else if (xhr.status >= 400) {
                            code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
                        }
                        else {
                            code.textContent = '✖ Error: File does not exist, is empty or trying to view from localhost';
                        }
                    }
                };

                xhr.send(null);
            });
        }

        var modals = document.querySelectorAll("[data-modal]");

        modals.forEach(function (trigger) {
            trigger.addEventListener("click", function (event) {
                //event.preventDefault();
                const modal = document.getElementById(trigger.dataset.modal);
                modal.classList.add("phpdocumentor-modal__open");
                loadExternalCodeSnippets(trigger.dataset.line)
                const exits = modal.querySelectorAll("[data-exit-button]");
                exits.forEach(function (exit) {
                    exit.addEventListener("click", function (event) {
                        event.preventDefault();
                        modal.classList.remove("phpdocumentor-modal__open");
                    });
                });
            });
        });
    </script>

    </article>
                <section data-search-results class="phpdocumentor-search-results phpdocumentor-search-results--hidden">
    <section class="phpdocumentor-search-results__dialog">
        <header class="phpdocumentor-search-results__header">
            <h2 class="phpdocumentor-search-results__title">Search results</h2>
            <button class="phpdocumentor-search-results__close"><i class="fas fa-times"></i></button>
        </header>
        <section class="phpdocumentor-search-results__body">
            <ul class="phpdocumentor-search-results__entries"></ul>
        </section>
    </section>
</section>
            </div>
        </div>
        <a href="classes/app-core-database-Database.html#top" class="phpdocumentor-back-to-top"><i class="fas fa-chevron-circle-up"></i></a>

    </main>

    <script>
        cssVars({});
    </script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/prism.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.23.0/plugins/line-highlight/prism-line-highlight.min.js"></script>
</body>
</html>
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";